import os
import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

bot = Bot(token=TOKEN)
dp = Dispatcher()

DB_PATH = os.path.join(os.path.dirname(__file__), "cartridges.db")


# === –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò/–°–¢–í–û–†–ï–ù–ù–Ø –ë–ê–ó–ò ===
def ensure_database():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–∑—É: —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
    if not os.path.exists(DB_PATH):
        print("‚öôÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É...")
        init_db()
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()

        cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [t[0] for t in cur.fetchall()]

        needs_rebuild = False

        if "cartridges" not in tables or "batches" not in tables:
            needs_rebuild = True
        else:
            cur.execute("PRAGMA table_info(batches)")
            columns = [col[1] for col in cur.fetchall()]
            if "status" not in columns:
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è batches –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ 'status' ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É.")
                needs_rebuild = True

        conn.close()

        if needs_rebuild:
            os.remove(DB_PATH)
            print("üß± –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏...")
            init_db()
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É –Ω–æ—Ä–º—ñ.")
    except Exception as e:
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –±–∞–∑–∏:", e)
        if os.path.exists(DB_PATH):
            os.remove(DB_PATH)
        init_db()


def init_db():
    """–°—Ç–≤–æ—Ä—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ —Ç–∞–±–ª–∏—Ü—ñ."""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # --- –¢–∞–±–ª–∏—Ü—è –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ–≤ ---
    cur.execute("""
        CREATE TABLE IF NOT EXISTS cartridges (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date_received TEXT,
            department TEXT,
            status TEXT,
            date_sent TEXT,
            date_returned TEXT,
            date_given TEXT,
            batch_id INTEGER
        )
    """)

    # --- –¢–∞–±–ª–∏—Ü—è –ø–∞—Ä—Ç—ñ–π ---
    cur.execute("""
        CREATE TABLE IF NOT EXISTS batches (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            created_at TEXT,
            status TEXT
        )
    """)

    conn.commit()
    conn.close()
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ —Ç–∞–±–ª–∏—Ü—ñ cartridges, batches.")


# === –ö–û–ú–ê–ù–î–ê /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂", callback_data="add_cartridge")],
        [InlineKeyboardButton(text="üì¶ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–∞—Ä—Ç—ñ–π", callback_data="view_batches")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="change_status")],
    ])
    await message.answer("üõ†Ô∏è *–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞–º–∏:*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá", parse_mode="Markdown", reply_markup=kb)


# === –î–û–î–ê–í–ê–ù–ù–Ø –ö–ê–†–¢–†–ò–î–ñ–ê ===
@dp.callback_query(lambda c: c.data == "add_cartridge")
async def add_cartridge(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:")
    dp.message.register(save_info)


async def save_info(message: types.Message):
    dept = message.text.strip()
    date_received = datetime.now().strftime("%d.%m.%Y")

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó
    cur.execute("SELECT id FROM batches WHERE status='active'")
    row = cur.fetchone()

    if row is None:
        cur.execute(
            "INSERT INTO batches (created_at, status) VALUES (?, ?)",
            (date_received, "active")
        )
        conn.commit()
        batch_id = cur.lastrowid
        print("üÜï –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –ø–∞—Ä—Ç—ñ—é:", batch_id)
    else:
        batch_id = row[0]

    # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç—Ä–∏–¥–∂
    cur.execute("""
        INSERT INTO cartridges (date_received, department, status, batch_id)
        VALUES (?, ?, ?, ?)
    """, (date_received, dept, "‚õî –í–∏–ª—É—á–µ–Ω–æ —É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", batch_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ö–∞—Ä—Ç—Ä–∏–¥–∂ —ñ–∑ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è '{dept}' –¥–æ–¥–∞–Ω–æ –¥–æ –ø–∞—Ä—Ç—ñ—ó ‚Ññ{batch_id}.")


# === –ü–ï–†–ï–ì–õ–Ø–î –ü–ê–†–¢–Ü–ô ===
@dp.callback_query(lambda c: c.data == "view_batches")
async def view_batches(callback: types.CallbackQuery):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, created_at, status FROM batches ORDER BY id DESC")
    batches = cur.fetchall()
    conn.close()

    if not batches:
        await callback.message.answer("‚ùå –ü–∞—Ä—Ç—ñ–π —â–µ –Ω–µ–º–∞—î.")
        return

    text = "üì¶ *–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç—ñ–π:*\n\n"
    for b in batches:
        text += f"üÜî {b[0]} | üìÖ {b[1]} | üü¢ {b[2]}\n"
    await callback.message.answer(text, parse_mode="Markdown")


# === –ó–ú–Ü–ù–ê –°–¢–ê–¢–£–°–£ ===
@dp.callback_query(lambda c: c.data == "change_status")
async def choose_batch(callback: types.CallbackQuery):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, created_at FROM batches ORDER BY id DESC")
    batches = cur.fetchall()
    conn.close()

    if not batches:
        await callback.message.answer("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–∞—Ä—Ç—ñ—è {b[0]} ({b[1]})", callback_data=f"batch_{b[0]}")] for b in batches
    ])
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ç—ñ—é:", reply_markup=kb)


@dp.callback_query(lambda c: c.data.startswith("batch_"))
async def change_status(callback: types.CallbackQuery):
    batch_id = int(callback.data.split("_")[1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–∏–π–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫—É", callback_data=f"status_{batch_id}_sent")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–¥–∞—á—ñ", callback_data=f"status_{batch_id}_ready")],
        [InlineKeyboardButton(text="üì§ –í–∏–¥–∞–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É", callback_data=f"status_{batch_id}_given")],
    ])
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞—Ä—Ç—ñ—ó:", reply_markup=kb)


@dp.callback_query(lambda c: c.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    batch_id = int(parts[1])
    new_status = parts[2]

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    if new_status == "sent":
        status_text = "üöö –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫—É"
        cur.execute("UPDATE cartridges SET status=?, date_sent=? WHERE batch_id=?",
                    (status_text, datetime.now().strftime("%d.%m.%Y"), batch_id))
    elif new_status == "ready":
        status_text = "‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–¥–∞—á—ñ"
        cur.execute("UPDATE cartridges SET status=?, date_returned=? WHERE batch_id=?",
                    (status_text, datetime.now().strftime("%d.%m.%Y"), batch_id))
    elif new_status == "given":
        status_text = "üì§ –í–∏–¥–∞–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É"
        cur.execute("UPDATE cartridges SET status=?, date_given=? WHERE batch_id=?",
                    (status_text, datetime.now().strftime("%d.%m.%Y"), batch_id))

    conn.commit()
    conn.close()

    await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç—ñ—ó ‚Ññ{batch_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status_text}")


# === WEB SERVER (–¥–ª—è Render/PythonAnywhere) ===
async def handle(request):
    return web.Response(text="Bot is running ‚úÖ")

async def run_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    print("üåê Web endpoint started on port", os.getenv("PORT", 10000))


# === –ó–ê–ü–£–°–ö ===
async def main():
    ensure_database()
    await asyncio.gather(
        run_web_server(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())
