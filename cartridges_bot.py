import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web
import os

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
TOKEN = os.getenv("TOKEN", "YOUR_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "111111111"))
DB_PATH = "cartridges.db"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –§—É–Ω–∫—Ü—ñ—ó –¥–∞—Ç–∏ ===
def current_date():
    return datetime.now().strftime("%d.%m.%Y")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS cartridges (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date_received TEXT,
            department TEXT,
            status TEXT,
            date_sent TEXT,
            date_returned TEXT,
            date_given TEXT,
            batch_id INTEGER
        )
    """)
    conn.commit()
    conn.close()

init_db()

# === –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂", callback_data="add")
    kb.button(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="menu_status")
    kb.button(text="üì¶ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–∞—Ä—Ç—ñ–π", callback_data="view_batches")
    kb.button(text="üì§ –ï–∫—Å–ø–æ—Ä—Ç —É Excel", callback_data="export_excel")
    kb.adjust(2)
    return kb.as_markup()

# === –ö–æ–º–∞–Ω–¥–∏ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    await message.answer("üßæ *–û–±–ª—ñ–∫ –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ–≤*\n–í–∏–±–µ—Ä–∏ –¥—ñ—é:", parse_mode="Markdown", reply_markup=main_menu())

# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@dp.callback_query(F.data == "menu_home")
async def menu_home(callback: types.CallbackQuery):
    await callback.message.edit_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

# === –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ ===
@dp.callback_query(F.data == "add")
async def add_cartridge(callback: types.CallbackQuery):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT MAX(batch_id) FROM cartridges")
    batch_id = cur.fetchone()[0] or 1
    cur.execute("INSERT INTO cartridges (date_received, department, status, batch_id) VALUES (?, ?, ?, ?)",
                (current_date(), "–ù–µ–≤–∫–∞–∑–∞–Ω–æ", "‚õî –í–∏–ª—É—á–µ–Ω–æ —É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", batch_id))
    conn.commit()
    conn.close()

    await callback.message.answer("‚úÖ –ö–∞—Ä—Ç—Ä–∏–¥–∂ –¥–æ–¥–∞–Ω–æ.", reply_markup=main_menu())

# === –í–∏–±—ñ—Ä –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É ===
@dp.callback_query(F.data == "menu_status")
async def choose_batch(callback: types.CallbackQuery):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT batch_id FROM cartridges ORDER BY batch_id DESC")
    batches = cur.fetchall()
    conn.close()

    kb = InlineKeyboardBuilder()
    for b in batches:
        kb.button(text=f"–ü–∞—Ä—Ç—ñ—è #{b[0]}", callback_data=f"status_batch_{b[0]}")
    kb.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_home")
    kb.adjust(2)
    await callback.message.edit_text("üîÑ –í–∏–±–µ—Ä–∏ –ø–∞—Ä—Ç—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:", reply_markup=kb.as_markup())

# === –í–∏–±—ñ—Ä –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –≤ –ø–∞—Ä—Ç—ñ—ó ===
@dp.callback_query(F.data.startswith("status_batch_"))
async def select_cartridge(callback: types.CallbackQuery):
    batch_id = int(callback.data.split("_")[2])
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, department, status FROM cartridges WHERE batch_id=?", (batch_id,))
    cartridges = cur.fetchall()
    conn.close()

    kb = InlineKeyboardBuilder()
    for c in cartridges:
        kb.button(text=f"#{c[0]} | {c[1]} ({c[2]})", callback_data=f"choose_status_{c[0]}")
    kb.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_home")
    kb.adjust(1)
    await callback.message.edit_text(f"üì¶ –ü–∞—Ä—Ç—ñ—è #{batch_id}\n–í–∏–±–µ—Ä–∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂:", reply_markup=kb.as_markup())

# === –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É ===
@dp.callback_query(F.data.startswith("choose_status_"))
async def change_status(callback: types.CallbackQuery):
    cid = int(callback.data.split("_")[2])
    kb = InlineKeyboardBuilder()
    kb.button(text="‚õî –í–∏–ª—É—á–µ–Ω–æ —É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", callback_data=f"set_{cid}_s1")
    kb.button(text="üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ñ—ñ—Ä–º—É", callback_data=f"set_{cid}_s2")
    kb.button(text="‚úÖ –ü—Ä–∏–±—É–ª–æ –∑ —Ñ—ñ—Ä–º–∏", callback_data=f"set_{cid}_s3")
    kb.button(text="üì¶ –í–∏–¥–∞–Ω–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É", callback_data=f"set_{cid}_s4")
    kb.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_home")
    kb.adjust(1)
    await callback.message.edit_text(f"üîß –í–∏–±–µ—Ä–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è #{cid}:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("set_"))
async def set_status(callback: types.CallbackQuery):
    cid, code = int(callback.data.split("_")[1]), callback.data.split("_")[2]

    status_map = {
        "s1": "‚õî –í–∏–ª—É—á–µ–Ω–æ —É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
        "s2": "üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ñ—ñ—Ä–º—É",
        "s3": "‚úÖ –ü—Ä–∏–±—É–ª–æ –∑ —Ñ—ñ—Ä–º–∏",
        "s4": "üì¶ –í–∏–¥–∞–Ω–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É"
    }
    field_map = {
        "s1": "date_received",
        "s2": "date_sent",
        "s3": "date_returned",
        "s4": "date_given"
    }

    new_status = status_map.get(code)
    field = field_map.get(code)
    today = current_date()

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    if field:
        cur.execute(f"UPDATE cartridges SET status=?, {field}=? WHERE id=?", (new_status, today, cid))
    else:
        cur.execute("UPDATE cartridges SET status=? WHERE id=?", (new_status, cid))
    conn.commit()
    cur.execute("SELECT department FROM cartridges WHERE id=?", (cid,))
    dept = cur.fetchone()[0]
    conn.close()

    text = (
        f"‚úÖ *–ö–∞—Ä—Ç—Ä–∏–¥–∂ #{cid}* | *{dept}*\n"
        f"üîÅ –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {new_status}\n"
        f"üìÖ –î–∞—Ç–∞: {today}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_home")
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=kb.as_markup())

# === –í–µ–±-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="‚úÖ Bot is alive!", content_type="text/plain")

async def run_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)
    await site.start()
    print("üåê Web endpoint started on port 10000")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await asyncio.gather(
        run_web_server(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())
